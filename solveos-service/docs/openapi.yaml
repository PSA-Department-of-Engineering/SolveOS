openapi: 3.1.0
info:
  title: SolveOS API
  description: ServiceOS API with OAuth2 authentication.
  version: 1.0.0
paths:
  /health:
    get:
      tags:
      - Health
      summary: Health check
      description: Check if the API is running and healthy
      operationId: health_check_health_get
      responses:
        '200':
          description: API health status
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
                title: Response Health Check Health Get
  /api/v1/auth/login:
    post:
      tags:
      - Authentication
      - Authentication
      summary: Login to get access token
      description: OAuth2 compatible token login with HttpOnly cookie.
      operationId: login_api_v1_auth_login_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_api_v1_auth_login_post'
        required: true
      responses:
        '200':
          description: Successful authentication - cookie set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDTO'
        '401':
          description: Invalid credentials
        '400':
          description: User account is disabled
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/auth/me:
    get:
      tags:
      - Authentication
      - Authentication
      summary: Get current user information
      description: Retrieve information about the currently authenticated user.
      operationId: get_current_user_api_v1_auth_me_get
      parameters:
      - name: solveos_token
        in: cookie
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: Solveos Token
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '401':
          description: Not authenticated or invalid token
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /:
    get:
      tags:
      - Root
      summary: Root
      description: API root endpoint with quick links
      operationId: root__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
                title: Response Root  Get
components:
  schemas:
    Body_login_api_v1_auth_login_post:
      properties:
        grant_type:
          anyOf:
          - type: string
            pattern: ^password$
          - type: 'null'
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          format: password
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - type: 'null'
          format: password
          title: Client Secret
      type: object
      required:
      - username
      - password
      title: Body_login_api_v1_auth_login_post
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    LoginResponseDTO:
      properties:
        access_token:
          type: string
          title: Access Token
          description: JWT access token
        token_type:
          type: string
          title: Token Type
          description: Token type (always 'bearer')
          default: bearer
      type: object
      required:
      - access_token
      title: LoginResponseDTO
      description: HTTP DTO for login response.
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type: bearer
    UserResponseDTO:
      properties:
        email:
          type: string
          format: email
          title: Email
          description: User email address
        full_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Full Name
          description: User full name
        disabled:
          type: boolean
          title: Disabled
          description: Whether user is disabled
          default: false
      type: object
      required:
      - email
      title: UserResponseDTO
      description: HTTP DTO for user information response.
      example:
        disabled: false
        email: admin@solveos.com
        full_name: Admin User
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          tokenUrl: /api/v1/auth/login
          scopes: {}
